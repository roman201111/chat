–Ø –¥–æ–¥–∞–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏, –∫–æ–ª–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –Ω–∞–±–∏—Ä–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–±–º—ñ–Ω—É –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–∞–º–∏, –¥–æ–¥–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ.

–û—Å—å –∑–º—ñ–Ω–∏, —è–∫—ñ —è –ø—Ä–æ–ø–æ–Ω—É—é –≤–Ω–µ—Å—Ç–∏ –¥–æ –∫–æ–¥—É:

```python
import threading
import base64  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
import io  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±—ñ–Ω–∞—Ä–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
import os  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —à–ª—è—Ö–∞–º–∏ —Ñ–∞–π–ª—ñ–≤
import time  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ç–∞–π–º–µ—Ä—ñ–≤ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É
from socket import *
from customtkinter import *
from tkinter import filedialog  # –î–æ–¥–∞–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤
from PIL import Image  # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏

class MainWindow(CTk):
    def __init__(self):
        super().__init__()
        self.geometry('400x300')
        self.label = None
        self.entry = None

        self.menu_frame = CTkFrame(self, fg_color='light blue', width=30, height=300)
        self.menu_frame.pack_propagate(False)
        self.menu_frame.place(x=0, y=0)
        self.is_show_menu = False
        self.speed_animate_menu = -5
        #–∫–Ω–æ–ø–∫–∞
        self.btn = CTkButton(self, text='‚ñ∂Ô∏è', command=self.toggle_show_menu, width=30)
        self.btn.place(x=0, y=0)
        # —Ç–µ–º–∞ –≤—ñ–∫–Ω–∞
        self.label_theme = CTkOptionMenu(self.menu_frame, values=['–¢–µ–º–Ω–∞', '–°–≤—ñ—Ç–ª–∞'], command=self.change_theme)
        self.label_theme.pack(side='bottom', pady=20)
        self.theme = None

        self.chat_field = CTkScrollableFrame(self)
        self.chat_field.place(x=0, y=0)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
        self.typing_status_label = CTkLabel(self, text="", text_color="gray")
        self.typing_status_label.place(x=0, y=230)  # –ë—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ adaptive_ui

        self.message_input = CTkEntry(self, placeholder_text='–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:')
        self.message_input.place(x=0, y=250)
        self.send_button = CTkButton(self, text='‚ñ∂', width=40, height=30, command = self.send_message)
        self.send_button.place(x=200, y=250)
        self.open_img_button = CTkButton(self, text='üìÇ', width=40, height=30, command=self.open_image)
        self.open_img_button.place(x=0, y=0)  # –¢–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –±—É–¥—É—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—ñ –≤ —Ñ—É–Ω–∫—Ü—ñ—ó adaptive_ui
        self.username = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'

        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.typing_users = {}

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É
        self.is_typing = False
        self.last_typing_time = 0
        self.typing_timeout = 2  # —Å–µ–∫—É–Ω–¥–∏ –¥–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É

        try:
            self.sock = socket(AF_INET, SOCK_STREAM)
            self.sock.connect(('localhost', 8080))
            hello = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
            self.sock.send(hello.encode('utf-8'))
            threading.Thread(target=self.recv_message, daemon=True).start()
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–æ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É
        self.message_input.bind("<KeyRelease>", self.handle_typing)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É
        threading.Thread(target=self.check_typing_status, daemon=True).start()

        self.adaptive_ui()

    def toggle_show_menu(self):
        if self.is_show_menu:
            self.is_show_menu = False
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚ñ∂Ô∏è')
            self.show_menu()
        else:
            self.is_show_menu = True
            self.speed_animate_menu *= -1
            self.btn.configure(text='‚óÄÔ∏è')
            self.show_menu()
            # setting menu widgets
            self.label = CTkLabel(self.menu_frame, text='–Ü–º º—è')
            self.label.pack(pady=30)
            self.entry = CTkEntry(self.menu_frame)
            self.entry.pack()
            self.save_btn = CTkButton(self.menu_frame, text='–ó–±–µ—Ä–µ–≥—Ç–∏', command=self.save_username)
            self.save_btn.pack(pady=10)
    def save_username(self):
        if self.entry and self.entry.get().strip():
            self.username = self.entry.get().strip()
            self.add_message(f"–í–∞—à–µ —ñ–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {self.username}")

    def show_menu(self):
        self.menu_frame.configure(width=self.menu_frame.winfo_width() + self.speed_animate_menu)
        if not self.menu_frame.winfo_width() >= 200 and self.is_show_menu:
            self.after(10, self.show_menu)
        elif self.menu_frame.winfo_width() >= 40 and not self.is_show_menu:
            self.after(10, self.show_menu)
            if hasattr(self, 'label') and self.label:
                self.label.destroy()
            if hasattr(self, 'entry') and self.entry:
                self.entry.destroy()
            if hasattr(self, 'save_btn') and self.save_btn:
                self.save_btn.destroy()

    def change_theme(self, value):
        if value == '–¢–µ–º–Ω–∞':
            set_appearance_mode('dark')
            self.menu_frame.configure(fg_color='dodger blue')
        else:
            set_appearance_mode('light')
            self.menu_frame.configure(fg_color='light blue')

    def adaptive_ui(self):
        self.menu_frame.configure(height=self.winfo_height())
        self.chat_field.place(x=self.menu_frame.winfo_width())
        self.chat_field.configure(width=self.winfo_width() - self.menu_frame.winfo_width() - 20,
                                  height=self.winfo_height() - 40)
        self.send_button.place(x=self.winfo_width() - 100, y=self.winfo_height() - 40)
        self.open_img_button.place(x=self.winfo_width() - 50, y=self.winfo_height() - 40)
        self.message_input.place(x=self.menu_frame.winfo_width(), y=self.send_button.winfo_y())
        self.message_input.configure(
            width=self.winfo_width() - self.menu_frame.winfo_width() - 110)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –º—ñ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É
        self.typing_status_label.place(
            x=self.menu_frame.winfo_width(),
            y=self.send_button.winfo_y() - 20
        )
        self.typing_status_label.configure(
            width=self.winfo_width() - self.menu_frame.winfo_width() - 20
        )

        self.after(50, self.adaptive_ui)

    def add_message(self, message, img=None):
        message_frame = CTkFrame(self.chat_field, fg_color='grey')
        message_frame.pack(pady=5, anchor='w')
        wrapleng_size = self.winfo_width() - self.menu_frame.winfo_width() - 40

        if not img:
            CTkLabel(message_frame, text=message, wraplength=wrapleng_size,
                     text_color='white', justify='left').pack(padx=10, pady=5)
        else:
            CTkLabel(message_frame, text=message, wraplength=wrapleng_size,
                     text_color='white', image=img, compound='top',
                     justify='left').pack(padx=10, pady=5)

    def send_message(self):
        message = self.message_input.get()
        if message:
            data = f"TEXT@{self.username}@{message}\n"
            try:
                self.sock.sendall(data.encode())
                self.add_message(f"{self.username}: {message}")

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å, —â–æ –Ω–∞–±—ñ—Ä –∑–∞–∫—ñ–Ω—á–µ–Ω–æ
                self.send_typing_status(False)
                self.is_typing = False
            except Exception as e:
                self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}")
        self.message_input.delete(0, END)

    def recv_message(self):
        buffer = ""
        while True:
            try:
                chunk = self.sock.recv(4096)
                if not chunk:
                    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ
                    self.add_message("[SYSTEM] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ")
                    break
                buffer += chunk.decode('utf-8', errors='ignore')  # –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä errors='ignore'

                # –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                while "\n" in buffer:
                    line, buffer = buffer.split("\n", 1)
                    self.handle_line(line.strip())
            except Exception as e:
                self.add_message(f"[SYSTEM] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {e}")
                break
        # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        self.sock.close()

    def handle_line(self, line):
        if not line:
            return
        parts = line.split("@", 3)
        if len(parts) < 2:
            self.add_message(line)
            return

        msg_type = parts[0]

        if msg_type == "TEXT":
            if len(parts) >= 3:
                author = parts[1]
                message = parts[2]
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –Ω–∞—à–µ –≤–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if author != self.username:
                    self.add_message(f"{author}: {message}")
                    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if author in self.typing_users:
                        del self.typing_users[author]
                        self.update_typing_status_label()
        elif msg_type == "IMAGE":
            if len(parts) >= 4:
                author = parts[1]
                filename = parts[2]
                b64_img = parts[3]
                try:
                    img_data = base64.b64decode(b64_img)
                    pil_img = Image.open(io.BytesIO(img_data))
                    ctk_img = CTkImage(pil_img, size=(300, 300))
                    self.add_message(f"{author} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}", img=ctk_img)
                    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    if author in self.typing_users:
                        del self.typing_users[author]
                        self.update_typing_status_label()
                except Exception as e:
                    self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        elif msg_type == "TYPING":
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É
            if len(parts) >= 3:
                author = parts[1]
                is_typing = parts[2] == "true"

                if author != self.username:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –Ω–∞–±–æ—Ä—É
                    if is_typing:
                        self.typing_users[author] = time.time()
                    else:
                        if author in self.typing_users:
                            del self.typing_users[author]

                    self.update_typing_status_label()
        else:
            self.add_message(line)

    def open_image(self):
        file_name = filedialog.askopenfilename(
            filetypes=[("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "*.jpg *.jpeg *.png *.gif *.bmp")])  # –î–æ–¥–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤
        if not file_name:
            return
        try:
            # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
            pil_img = Image.open(file_name)
            # –û–±–º–µ–∂—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            max_size = (800, 800)
            pil_img.thumbnail(max_size, Image.Resampling.LANCZOS)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            img_buffer = io.BytesIO()
            pil_img.save(img_buffer, format=pil_img.format if pil_img.format else 'PNG')
            img_buffer.seek(0)
            raw = img_buffer.read()

            b64_data = base64.b64encode(raw).decode()
            short_name = os.path.basename(file_name)
            data = f"IMAGE@{self.username}@{short_name}@{b64_data}\n"
            self.sock.sendall(data.encode())

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
            ctk_img = CTkImage(pil_img, size=(300, 300))
            self.add_message(f"{self.username} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {short_name}", img=ctk_img)

            # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.send_typing_status(False)
            self.is_typing = False
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    # –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
    def handle_typing(self, event):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É"""
        current_time = time.time()

        # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç —É –ø–æ–ª—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ –º–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É –∞–±–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É
        if (self.message_input.get() and
            (not self.is_typing or current_time - self.last_typing_time > 3)):
            self.is_typing = True
            self.last_typing_time = current_time
            self.send_typing_status(True)
        # –Ø–∫—â–æ –ø–æ–ª–µ –ø—É—Å—Ç–µ, –∞–ª–µ —Å—Ç–∞—Ç—É—Å - –Ω–∞–±–∏—Ä–∞—î
        elif not self.message_input.get() and self.is_typing:
            self.is_typing = False
            self.send_typing_status(False)

    def send_typing_status(self, is_typing):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É"""
        status = "true" if is_typing else "false"
        try:
            data = f"TYPING@{self.username}@{status}\n"
            self.sock.sendall(data.encode())
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É: {e}")

    def update_typing_status_label(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É"""
        if not self.typing_users:
            self.typing_status_label.configure(text="")
            return

        typing_names = list(self.typing_users.keys())

        if len(typing_names) == 1:
            status_text = f"{typing_names[0]} –Ω–∞–±–∏—Ä–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
        elif len(typing_names) == 2:
            status_text = f"{typing_names[0]} —ñ {typing_names[1]} –Ω–∞–±–∏—Ä–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
        else:
            status_text = f"{len(typing_names)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞–±–∏—Ä–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."

        self.typing_status_label.configure(text=status_text)

    def check_typing_status(self):
        """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ –Ω–∞–±–æ—Ä—É"""
        while True:
            current_time = time.time()
            need_update = False

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Å—Ç–∞—Ç—É—Å–∏ –Ω–∞–±–æ—Ä—É
            users_to_remove = []
            for user, timestamp in self.typing_users.items():
                if current_time - timestamp > self.typing_timeout:
                    users_to_remove.append(user)
                    need_update = True

            for user in users_to_remove:
                del self.typing_users[user]

            if need_update:
                self.update_typing_status_label()

            time.sleep(0.5)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 0.5 —Å–µ–∫—É–Ω–¥

win = MainWindow()
win.mainloop()

```

## –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤–Ω–µ—Å–µ–Ω–∏—Ö –∑–º—ñ–Ω

–Ø –¥–æ–¥–∞–≤ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É. –û—Å—å –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–∏:

1. **–Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è time**:
   - –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç `import time` –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∞–π–º–µ—Ä–∞–º–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É

2. **–ù–æ–≤—ñ –ø–æ–ª—è –∫–ª–∞—Å—É**:
   - `self.typing_status_label` - –º—ñ—Ç–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É, —Ö—Ç–æ –∑–∞—Ä–∞–∑ –Ω–∞–±–∏—Ä–∞—î —Ç–µ–∫—Å—Ç
   - `self.typing_users` - —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–∞–±–∏—Ä–∞—é—Ç—å —Ç–µ–∫—Å—Ç
   - `self.is_typing` - —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   - `self.last_typing_time` - —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É
   - `self.typing_timeout` - —á–∞—Å –¥–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É

3. **–£ –º–µ—Ç–æ–¥—ñ `__init__()`**:
   - –°—Ç–≤–æ—Ä–µ–Ω–æ –º—ñ—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É
   - –î–æ–¥–∞–Ω–æ –ø—Ä–∏–≤'—è–∑–∫—É –ø–æ–¥—ñ—ó `KeyRelease` –¥–æ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
   - –ó–∞–ø—É—â–µ–Ω–æ –æ–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É

4. **–£ –º–µ—Ç–æ–¥—ñ `adaptive_ui()`**:
   - –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –º—ñ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É

5. **–£ –º–µ—Ç–æ–¥–∞—Ö `send_message()` —Ç–∞ `open_image()`**:
   - –î–æ–¥–∞–Ω–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

6. **–£ –º–µ—Ç–æ–¥—ñ `handle_line()`**:
   - –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å `TYPING`
   - –û–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–±–æ—Ä—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

7. **–ù–æ–≤—ñ –º–µ—Ç–æ–¥–∏**:
   - `handle_typing()` - –æ–±—Ä–æ–±–ª—è—î –ø–æ–¥—ñ—ó –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç—É –≤ –ø–æ–ª—ñ –≤–≤–µ–¥–µ–Ω–Ω—è
   - `send_typing_status()` - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   - `update_typing_status_label()` - –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –Ω–∞ –º—ñ—Ç—Ü—ñ —Å—Ç–∞—Ç—É—Å—É
   - `check_typing_status()` - –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ñ –æ—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Å—Ç–∞—Ç—É—Å–∏ –Ω–∞–±–æ—Ä—É

–¶—ñ –∑–º—ñ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–∞—á–∏—Ç–∏, –∫–æ–ª–∏ —ñ–Ω—à—ñ —É—á–∞—Å–Ω–∏–∫–∏ —á–∞—Ç—É –Ω–∞–±–∏—Ä–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —Ä–æ–±–∏—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –±—ñ–ª—å—à —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º —Ç–∞ –∑—Ä—É—á–Ω–∏–º.

–í–∞–∂–ª–∏–≤–æ –∑–∞—É–≤–∞–∂–∏—Ç–∏, —â–æ —Ü—ñ –∑–º—ñ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏–º—É—Ç—å —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å `TYPING`, –∞–ª–µ —è —Å—Ñ–æ–∫—É—Å—É–≤–∞–≤—Å—è –ª–∏—à–µ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—Å—å–∫—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.